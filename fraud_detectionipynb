{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <h1><center>Fraud Detection Case study</center></h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given Dataset: Dataset contain actual transaction with anonymized features and a time and a class feature (0 = non fraud, 1 = fraud)\n",
    "Objective: built a robust model that can predict whether a transaction is fraudulent or not.\n",
    "I built a deep learning model using Keras and Tensorflow to achieve the task.\n",
    "\n",
    "Process:\n",
    "- Imported and cleaned the data by standardizing the data using Sklearn StandardScalar.\n",
    "- Built a deep learning model using TensorFlow and Keras with a 99% accuracy, yet with misclassified observations which we need to get rid of.\n",
    "- Tested multiple other algorithms such as SVM, Random Forest to find ones with best predictive power.\n",
    "- Optimized model by undersampling and oversampling unbalanced data which gave a model with 99% accuracy and no misclassified fraudulent transactions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "np.random.seed(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = pd.read_csv('creditcard.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>V9</th>\n",
       "      <th>...</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.359807</td>\n",
       "      <td>-0.072781</td>\n",
       "      <td>2.536347</td>\n",
       "      <td>1.378155</td>\n",
       "      <td>-0.338321</td>\n",
       "      <td>0.462388</td>\n",
       "      <td>0.239599</td>\n",
       "      <td>0.098698</td>\n",
       "      <td>0.363787</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.018307</td>\n",
       "      <td>0.277838</td>\n",
       "      <td>-0.110474</td>\n",
       "      <td>0.066928</td>\n",
       "      <td>0.128539</td>\n",
       "      <td>-0.189115</td>\n",
       "      <td>0.133558</td>\n",
       "      <td>-0.021053</td>\n",
       "      <td>149.62</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.191857</td>\n",
       "      <td>0.266151</td>\n",
       "      <td>0.166480</td>\n",
       "      <td>0.448154</td>\n",
       "      <td>0.060018</td>\n",
       "      <td>-0.082361</td>\n",
       "      <td>-0.078803</td>\n",
       "      <td>0.085102</td>\n",
       "      <td>-0.255425</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.225775</td>\n",
       "      <td>-0.638672</td>\n",
       "      <td>0.101288</td>\n",
       "      <td>-0.339846</td>\n",
       "      <td>0.167170</td>\n",
       "      <td>0.125895</td>\n",
       "      <td>-0.008983</td>\n",
       "      <td>0.014724</td>\n",
       "      <td>2.69</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.358354</td>\n",
       "      <td>-1.340163</td>\n",
       "      <td>1.773209</td>\n",
       "      <td>0.379780</td>\n",
       "      <td>-0.503198</td>\n",
       "      <td>1.800499</td>\n",
       "      <td>0.791461</td>\n",
       "      <td>0.247676</td>\n",
       "      <td>-1.514654</td>\n",
       "      <td>...</td>\n",
       "      <td>0.247998</td>\n",
       "      <td>0.771679</td>\n",
       "      <td>0.909412</td>\n",
       "      <td>-0.689281</td>\n",
       "      <td>-0.327642</td>\n",
       "      <td>-0.139097</td>\n",
       "      <td>-0.055353</td>\n",
       "      <td>-0.059752</td>\n",
       "      <td>378.66</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.966272</td>\n",
       "      <td>-0.185226</td>\n",
       "      <td>1.792993</td>\n",
       "      <td>-0.863291</td>\n",
       "      <td>-0.010309</td>\n",
       "      <td>1.247203</td>\n",
       "      <td>0.237609</td>\n",
       "      <td>0.377436</td>\n",
       "      <td>-1.387024</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.108300</td>\n",
       "      <td>0.005274</td>\n",
       "      <td>-0.190321</td>\n",
       "      <td>-1.175575</td>\n",
       "      <td>0.647376</td>\n",
       "      <td>-0.221929</td>\n",
       "      <td>0.062723</td>\n",
       "      <td>0.061458</td>\n",
       "      <td>123.50</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>-1.158233</td>\n",
       "      <td>0.877737</td>\n",
       "      <td>1.548718</td>\n",
       "      <td>0.403034</td>\n",
       "      <td>-0.407193</td>\n",
       "      <td>0.095921</td>\n",
       "      <td>0.592941</td>\n",
       "      <td>-0.270533</td>\n",
       "      <td>0.817739</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.009431</td>\n",
       "      <td>0.798278</td>\n",
       "      <td>-0.137458</td>\n",
       "      <td>0.141267</td>\n",
       "      <td>-0.206010</td>\n",
       "      <td>0.502292</td>\n",
       "      <td>0.219422</td>\n",
       "      <td>0.215153</td>\n",
       "      <td>69.99</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Time        V1        V2        V3        V4        V5        V6        V7  \\\n",
       "0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
       "1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
       "2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
       "3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
       "4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
       "\n",
       "         V8        V9  ...         V21       V22       V23       V24  \\\n",
       "0  0.098698  0.363787  ...   -0.018307  0.277838 -0.110474  0.066928   \n",
       "1  0.085102 -0.255425  ...   -0.225775 -0.638672  0.101288 -0.339846   \n",
       "2  0.247676 -1.514654  ...    0.247998  0.771679  0.909412 -0.689281   \n",
       "3  0.377436 -1.387024  ...   -0.108300  0.005274 -0.190321 -1.175575   \n",
       "4 -0.270533  0.817739  ...   -0.009431  0.798278 -0.137458  0.141267   \n",
       "\n",
       "        V25       V26       V27       V28  Amount  Class  \n",
       "0  0.128539 -0.189115  0.133558 -0.021053  149.62      0  \n",
       "1  0.167170  0.125895 -0.008983  0.014724    2.69      0  \n",
       "2 -0.327642 -0.139097 -0.055353 -0.059752  378.66      0  \n",
       "3  0.647376 -0.221929  0.062723  0.061458  123.50      0  \n",
       "4 -0.206010  0.502292  0.219422  0.215153   69.99      0  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Time',\n",
       " 'V1',\n",
       " 'V2',\n",
       " 'V3',\n",
       " 'V4',\n",
       " 'V5',\n",
       " 'V6',\n",
       " 'V7',\n",
       " 'V8',\n",
       " 'V9',\n",
       " 'V10',\n",
       " 'V11',\n",
       " 'V12',\n",
       " 'V13',\n",
       " 'V14',\n",
       " 'V15',\n",
       " 'V16',\n",
       " 'V17',\n",
       " 'V18',\n",
       " 'V19',\n",
       " 'V20',\n",
       " 'V21',\n",
       " 'V22',\n",
       " 'V23',\n",
       " 'V24',\n",
       " 'V25',\n",
       " 'V26',\n",
       " 'V27',\n",
       " 'V28',\n",
       " 'Amount',\n",
       " 'Class']"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Time      0\n",
       "V1        0\n",
       "V2        0\n",
       "V3        0\n",
       "V4        0\n",
       "V5        0\n",
       "V6        0\n",
       "V7        0\n",
       "V8        0\n",
       "V9        0\n",
       "V10       0\n",
       "V11       0\n",
       "V12       0\n",
       "V13       0\n",
       "V14       0\n",
       "V15       0\n",
       "V16       0\n",
       "V17       0\n",
       "V18       0\n",
       "V19       0\n",
       "V20       0\n",
       "V21       0\n",
       "V22       0\n",
       "V23       0\n",
       "V24       0\n",
       "V25       0\n",
       "V26       0\n",
       "V27       0\n",
       "V28       0\n",
       "Amount    0\n",
       "Class     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(284807, 31)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "dataset['normaliedAmount'] = StandardScaler().fit_transform(dataset['Amount'].values.reshape(-1,1))\n",
    "dataset = dataset.drop(['Amount'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>V9</th>\n",
       "      <th>...</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Class</th>\n",
       "      <th>normaliedAmount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.359807</td>\n",
       "      <td>-0.072781</td>\n",
       "      <td>2.536347</td>\n",
       "      <td>1.378155</td>\n",
       "      <td>-0.338321</td>\n",
       "      <td>0.462388</td>\n",
       "      <td>0.239599</td>\n",
       "      <td>0.098698</td>\n",
       "      <td>0.363787</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.018307</td>\n",
       "      <td>0.277838</td>\n",
       "      <td>-0.110474</td>\n",
       "      <td>0.066928</td>\n",
       "      <td>0.128539</td>\n",
       "      <td>-0.189115</td>\n",
       "      <td>0.133558</td>\n",
       "      <td>-0.021053</td>\n",
       "      <td>0</td>\n",
       "      <td>0.244964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.191857</td>\n",
       "      <td>0.266151</td>\n",
       "      <td>0.166480</td>\n",
       "      <td>0.448154</td>\n",
       "      <td>0.060018</td>\n",
       "      <td>-0.082361</td>\n",
       "      <td>-0.078803</td>\n",
       "      <td>0.085102</td>\n",
       "      <td>-0.255425</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.225775</td>\n",
       "      <td>-0.638672</td>\n",
       "      <td>0.101288</td>\n",
       "      <td>-0.339846</td>\n",
       "      <td>0.167170</td>\n",
       "      <td>0.125895</td>\n",
       "      <td>-0.008983</td>\n",
       "      <td>0.014724</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.342475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-1.358354</td>\n",
       "      <td>-1.340163</td>\n",
       "      <td>1.773209</td>\n",
       "      <td>0.379780</td>\n",
       "      <td>-0.503198</td>\n",
       "      <td>1.800499</td>\n",
       "      <td>0.791461</td>\n",
       "      <td>0.247676</td>\n",
       "      <td>-1.514654</td>\n",
       "      <td>...</td>\n",
       "      <td>0.247998</td>\n",
       "      <td>0.771679</td>\n",
       "      <td>0.909412</td>\n",
       "      <td>-0.689281</td>\n",
       "      <td>-0.327642</td>\n",
       "      <td>-0.139097</td>\n",
       "      <td>-0.055353</td>\n",
       "      <td>-0.059752</td>\n",
       "      <td>0</td>\n",
       "      <td>1.160686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-0.966272</td>\n",
       "      <td>-0.185226</td>\n",
       "      <td>1.792993</td>\n",
       "      <td>-0.863291</td>\n",
       "      <td>-0.010309</td>\n",
       "      <td>1.247203</td>\n",
       "      <td>0.237609</td>\n",
       "      <td>0.377436</td>\n",
       "      <td>-1.387024</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.108300</td>\n",
       "      <td>0.005274</td>\n",
       "      <td>-0.190321</td>\n",
       "      <td>-1.175575</td>\n",
       "      <td>0.647376</td>\n",
       "      <td>-0.221929</td>\n",
       "      <td>0.062723</td>\n",
       "      <td>0.061458</td>\n",
       "      <td>0</td>\n",
       "      <td>0.140534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.0</td>\n",
       "      <td>-1.158233</td>\n",
       "      <td>0.877737</td>\n",
       "      <td>1.548718</td>\n",
       "      <td>0.403034</td>\n",
       "      <td>-0.407193</td>\n",
       "      <td>0.095921</td>\n",
       "      <td>0.592941</td>\n",
       "      <td>-0.270533</td>\n",
       "      <td>0.817739</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.009431</td>\n",
       "      <td>0.798278</td>\n",
       "      <td>-0.137458</td>\n",
       "      <td>0.141267</td>\n",
       "      <td>-0.206010</td>\n",
       "      <td>0.502292</td>\n",
       "      <td>0.219422</td>\n",
       "      <td>0.215153</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.073403</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Time        V1        V2        V3        V4        V5        V6        V7  \\\n",
       "0   0.0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
       "1   0.0  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
       "2   1.0 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
       "3   1.0 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
       "4   2.0 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
       "\n",
       "         V8        V9       ...              V21       V22       V23  \\\n",
       "0  0.098698  0.363787       ...        -0.018307  0.277838 -0.110474   \n",
       "1  0.085102 -0.255425       ...        -0.225775 -0.638672  0.101288   \n",
       "2  0.247676 -1.514654       ...         0.247998  0.771679  0.909412   \n",
       "3  0.377436 -1.387024       ...        -0.108300  0.005274 -0.190321   \n",
       "4 -0.270533  0.817739       ...        -0.009431  0.798278 -0.137458   \n",
       "\n",
       "        V24       V25       V26       V27       V28  Class  normaliedAmount  \n",
       "0  0.066928  0.128539 -0.189115  0.133558 -0.021053      0         0.244964  \n",
       "1 -0.339846  0.167170  0.125895 -0.008983  0.014724      0        -0.342475  \n",
       "2 -0.689281 -0.327642 -0.139097 -0.055353 -0.059752      0         1.160686  \n",
       "3 -1.175575  0.647376 -0.221929  0.062723  0.061458      0         0.140534  \n",
       "4  0.141267 -0.206010  0.502292  0.219422  0.215153      0        -0.073403  \n",
       "\n",
       "[5 rows x 31 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>V9</th>\n",
       "      <th>V10</th>\n",
       "      <th>...</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Class</th>\n",
       "      <th>normaliedAmount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.359807</td>\n",
       "      <td>-0.072781</td>\n",
       "      <td>2.536347</td>\n",
       "      <td>1.378155</td>\n",
       "      <td>-0.338321</td>\n",
       "      <td>0.462388</td>\n",
       "      <td>0.239599</td>\n",
       "      <td>0.098698</td>\n",
       "      <td>0.363787</td>\n",
       "      <td>0.090794</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.018307</td>\n",
       "      <td>0.277838</td>\n",
       "      <td>-0.110474</td>\n",
       "      <td>0.066928</td>\n",
       "      <td>0.128539</td>\n",
       "      <td>-0.189115</td>\n",
       "      <td>0.133558</td>\n",
       "      <td>-0.021053</td>\n",
       "      <td>0</td>\n",
       "      <td>0.244964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.191857</td>\n",
       "      <td>0.266151</td>\n",
       "      <td>0.166480</td>\n",
       "      <td>0.448154</td>\n",
       "      <td>0.060018</td>\n",
       "      <td>-0.082361</td>\n",
       "      <td>-0.078803</td>\n",
       "      <td>0.085102</td>\n",
       "      <td>-0.255425</td>\n",
       "      <td>-0.166974</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.225775</td>\n",
       "      <td>-0.638672</td>\n",
       "      <td>0.101288</td>\n",
       "      <td>-0.339846</td>\n",
       "      <td>0.167170</td>\n",
       "      <td>0.125895</td>\n",
       "      <td>-0.008983</td>\n",
       "      <td>0.014724</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.342475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.358354</td>\n",
       "      <td>-1.340163</td>\n",
       "      <td>1.773209</td>\n",
       "      <td>0.379780</td>\n",
       "      <td>-0.503198</td>\n",
       "      <td>1.800499</td>\n",
       "      <td>0.791461</td>\n",
       "      <td>0.247676</td>\n",
       "      <td>-1.514654</td>\n",
       "      <td>0.207643</td>\n",
       "      <td>...</td>\n",
       "      <td>0.247998</td>\n",
       "      <td>0.771679</td>\n",
       "      <td>0.909412</td>\n",
       "      <td>-0.689281</td>\n",
       "      <td>-0.327642</td>\n",
       "      <td>-0.139097</td>\n",
       "      <td>-0.055353</td>\n",
       "      <td>-0.059752</td>\n",
       "      <td>0</td>\n",
       "      <td>1.160686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.966272</td>\n",
       "      <td>-0.185226</td>\n",
       "      <td>1.792993</td>\n",
       "      <td>-0.863291</td>\n",
       "      <td>-0.010309</td>\n",
       "      <td>1.247203</td>\n",
       "      <td>0.237609</td>\n",
       "      <td>0.377436</td>\n",
       "      <td>-1.387024</td>\n",
       "      <td>-0.054952</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.108300</td>\n",
       "      <td>0.005274</td>\n",
       "      <td>-0.190321</td>\n",
       "      <td>-1.175575</td>\n",
       "      <td>0.647376</td>\n",
       "      <td>-0.221929</td>\n",
       "      <td>0.062723</td>\n",
       "      <td>0.061458</td>\n",
       "      <td>0</td>\n",
       "      <td>0.140534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-1.158233</td>\n",
       "      <td>0.877737</td>\n",
       "      <td>1.548718</td>\n",
       "      <td>0.403034</td>\n",
       "      <td>-0.407193</td>\n",
       "      <td>0.095921</td>\n",
       "      <td>0.592941</td>\n",
       "      <td>-0.270533</td>\n",
       "      <td>0.817739</td>\n",
       "      <td>0.753074</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.009431</td>\n",
       "      <td>0.798278</td>\n",
       "      <td>-0.137458</td>\n",
       "      <td>0.141267</td>\n",
       "      <td>-0.206010</td>\n",
       "      <td>0.502292</td>\n",
       "      <td>0.219422</td>\n",
       "      <td>0.215153</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.073403</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         V1        V2        V3        V4        V5        V6        V7  \\\n",
       "0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
       "1  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
       "2 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
       "3 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
       "4 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
       "\n",
       "         V8        V9       V10       ...              V21       V22  \\\n",
       "0  0.098698  0.363787  0.090794       ...        -0.018307  0.277838   \n",
       "1  0.085102 -0.255425 -0.166974       ...        -0.225775 -0.638672   \n",
       "2  0.247676 -1.514654  0.207643       ...         0.247998  0.771679   \n",
       "3  0.377436 -1.387024 -0.054952       ...        -0.108300  0.005274   \n",
       "4 -0.270533  0.817739  0.753074       ...        -0.009431  0.798278   \n",
       "\n",
       "        V23       V24       V25       V26       V27       V28  Class  \\\n",
       "0 -0.110474  0.066928  0.128539 -0.189115  0.133558 -0.021053      0   \n",
       "1  0.101288 -0.339846  0.167170  0.125895 -0.008983  0.014724      0   \n",
       "2  0.909412 -0.689281 -0.327642 -0.139097 -0.055353 -0.059752      0   \n",
       "3 -0.190321 -1.175575  0.647376 -0.221929  0.062723  0.061458      0   \n",
       "4 -0.137458  0.141267 -0.206010  0.502292  0.219422  0.215153      0   \n",
       "\n",
       "   normaliedAmount  \n",
       "0         0.244964  \n",
       "1        -0.342475  \n",
       "2         1.160686  \n",
       "3         0.140534  \n",
       "4        -0.073403  \n",
       "\n",
       "[5 rows x 30 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset = dataset.drop(['Time'], axis=1)\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = dataset.iloc[:, dataset.columns !='Class']\n",
    "y = dataset.iloc[:, dataset.columns == 'Class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(199364, 29)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(85443, 29)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Convert train and test into arrays for deep learning model\n",
    "X_train = np.array(X_train)\n",
    "X_test = np.array(X_test)\n",
    "y_train = np.array(y_train)\n",
    "y_test = np.array(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "#model building\n",
    "\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /anaconda3/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "WARNING:tensorflow:From /anaconda3/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n"
     ]
    }
   ],
   "source": [
    "model = Sequential([\n",
    "    Dense(units = 16, input_dim = 29,activation='relu'),\n",
    "    Dense(units=24,activation='relu'),\n",
    "    Dropout(0.5),\n",
    "    Dense(20,activation='relu'),\n",
    "    Dense(24, activation= 'relu'),\n",
    "    Dense(1,activation='sigmoid'),\n",
    "    \n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_1 (Dense)              (None, 16)                480       \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 24)                408       \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 24)                0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 20)                500       \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 24)                504       \n",
      "_________________________________________________________________\n",
      "dense_5 (Dense)              (None, 1)                 25        \n",
      "=================================================================\n",
      "Total params: 1,917\n",
      "Trainable params: 1,917\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /anaconda3/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Epoch 1/5\n",
      "199364/199364 [==============================] - 14s 69us/step - loss: 0.0119 - acc: 0.9976\n",
      "Epoch 2/5\n",
      "199364/199364 [==============================] - 13s 67us/step - loss: 0.0043 - acc: 0.9993\n",
      "Epoch 3/5\n",
      "199364/199364 [==============================] - 15s 77us/step - loss: 0.0039 - acc: 0.9994\n",
      "Epoch 4/5\n",
      "199364/199364 [==============================] - 14s 68us/step - loss: 0.0038 - acc: 0.9993\n",
      "Epoch 5/5\n",
      "199364/199364 [==============================] - 13s 66us/step - loss: 0.0038 - acc: 0.9994\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a1d663438>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\n",
    "model.fit(X_train,y_train,batch_size=15, epochs=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "85443/85443 [==============================] - 1s 9us/step\n"
     ]
    }
   ],
   "source": [
    "#evaulate the model\n",
    "score = model.evaluate(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.003351401555200906, 0.9995201479348805]\n"
     ]
    }
   ],
   "source": [
    "print(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import itertools\n",
    "\n",
    "from sklearn import svm, datasets\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "def plot_confusion_matrix(cm, classes,\n",
    "                          normalize=False,\n",
    "                          title='Confusion matrix',\n",
    "                          cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "\n",
    "    print(cm)\n",
    "\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, format(cm[i, j], fmt),\n",
    "                 horizontalalignment=\"center\",\n",
    "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')\n",
    "    plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_test)\n",
    "y_test = pd.DataFrame(y_test)\n",
    "cm = confusion_matrix(y_test, y_pred.round())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[85290    19]\n",
      " [   22   112]]\n"
     ]
    }
   ],
   "source": [
    "print(cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[85290    19]\n",
      " [   22   112]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(cm,classes=[0,1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "## build random forest classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "random_forest = RandomForestClassifier(n_estimators = 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=None,\n",
       "            oob_score=False, random_state=None, verbose=0,\n",
       "            warm_start=False)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest.fit(X_train,y_train.values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = random_forest.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9994850368081645"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import itertools\n",
    "\n",
    "from sklearn import svm, datasets\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "def plot_confusion_matrix(cm, classes,\n",
    "                          normalize=False,\n",
    "                          title='Confusion matrix',\n",
    "                          cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "\n",
    "    print(cm)\n",
    "\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, format(cm[i, j], fmt),\n",
    "                 horizontalalignment=\"center\",\n",
    "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')\n",
    "    plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "cm = confusion_matrix(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[85274     6]\n",
      " [   38   125]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(cm, classes=[0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = random_forest.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "cm = confusion_matrix(y,y_pred.round())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[284309      6]\n",
      " [    38    454]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(cm, classes=[0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "492\n"
     ]
    }
   ],
   "source": [
    "##optimize model\n",
    "##undersampling\n",
    "\n",
    "fraud_indices = np.array(dataset[dataset.Class == 1].index) #built an array of the fraud rows class\n",
    "number_records_fraud = len(fraud_indices)\n",
    "print(number_records_fraud)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "normal_indices = dataset[dataset.Class == 0].index ## built an array of data of the non frauld rows class "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "random_normal_indices = np.random.choice(normal_indices, number_records_fraud, replace=False)\n",
    "random_normal_indices = np.array(random_normal_indices)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "492\n"
     ]
    }
   ],
   "source": [
    "print(len(random_normal_indices))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "984\n"
     ]
    }
   ],
   "source": [
    "under_sample_indices = np.concatenate([fraud_indices, random_normal_indices])\n",
    "print(len(under_sample_indices))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "under_sample_data = dataset.iloc[under_sample_indices,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_undersample = under_sample_data.iloc[:, under_sample_data.columns != 'Class']\n",
    "y_undersample = under_sample_data.iloc[:, under_sample_data.columns == 'Class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X_undersample, y_undersample, test_size = 0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = np.array(X_train)\n",
    "X_test = np.array(X_test)\n",
    "y_train = np.array(y_train)\n",
    "y_test = np.array(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_1 (Dense)              (None, 16)                480       \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 24)                408       \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 24)                0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 20)                500       \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 24)                504       \n",
      "_________________________________________________________________\n",
      "dense_5 (Dense)              (None, 1)                 25        \n",
      "=================================================================\n",
      "Total params: 1,917\n",
      "Trainable params: 1,917\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "688/688 [==============================] - 0s 616us/step - loss: 0.5209 - acc: 0.9215\n",
      "Epoch 2/5\n",
      "688/688 [==============================] - 0s 95us/step - loss: 0.2916 - acc: 0.9331\n",
      "Epoch 3/5\n",
      "688/688 [==============================] - 0s 82us/step - loss: 0.1900 - acc: 0.9390\n",
      "Epoch 4/5\n",
      "688/688 [==============================] - 0s 86us/step - loss: 0.1910 - acc: 0.9404\n",
      "Epoch 5/5\n",
      "688/688 [==============================] - 0s 84us/step - loss: 0.1657 - acc: 0.9462\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a1d663400>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\n",
    "model.fit(X_train,y_train,batch_size=15, epochs=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[148   0]\n",
      " [ 16 132]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = model.predict(X_test)\n",
    "y_expected = pd.DataFrame(y_test)\n",
    "cm = confusion_matrix(y_expected, y_pred.round())\n",
    "plot_confusion_matrix(cm, classes=[0,1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[283773    542]\n",
      " [    52    440]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = model.predict(X)\n",
    "y_expected = pd.DataFrame(y)\n",
    "cm = confusion_matrix(y_expected, y_pred.round())\n",
    "plot_confusion_matrix(cm, classes=[0,1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "##oversampling (SMOTE)\n",
    "from imblearn.over_sampling import SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_resample, y_resample = SMOTE().fit_sample(X, y.values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_resample = pd.DataFrame(y_resample)\n",
    "X_resample = pd.DataFrame(X_resample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X_resample,y_resample, test_size = 0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = np.array(X_train)\n",
    "X_test = np.array(X_test)\n",
    "y_train = np.array(y_train)\n",
    "y_test = np.array(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "398041/398041 [==============================] - 27s 68us/step - loss: 0.0348 - acc: 0.9880\n",
      "Epoch 2/5\n",
      "398041/398041 [==============================] - 26s 66us/step - loss: 0.0143 - acc: 0.9961\n",
      "Epoch 3/5\n",
      "398041/398041 [==============================] - 27s 67us/step - loss: 0.0116 - acc: 0.9971\n",
      "Epoch 4/5\n",
      "398041/398041 [==============================] - 27s 67us/step - loss: 0.0103 - acc: 0.9975\n",
      "Epoch 5/5\n",
      "398041/398041 [==============================] - 27s 67us/step - loss: 0.0093 - acc: 0.9978\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a1dfb3978>"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])\n",
    "model.fit(X_train,y_train,batch_size=15, epochs=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[85072   279]\n",
      " [    0 85238]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = model.predict(X_test)\n",
    "y_expected = pd.DataFrame(y_test)\n",
    "cm = confusion_matrix(y_expected, y_pred.round())\n",
    "plot_confusion_matrix(cm, classes=[0,1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9085755822473899"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[283492    823]\n",
      " [     0    492]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_pred = model.predict(X)\n",
    "y_expected = pd.DataFrame(y)\n",
    "cm = confusion_matrix(y_expected, y_pred.round())\n",
    "plot_confusion_matrix(cm, classes=[0,1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9998455094151478"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "random_forest.score(X, y)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
